vector的数据安排和操作方式类似C++内置数组类型array,唯一的区别就是在于空间的灵活应用
内置数组array是静态空间，一旦分配了内存空间就不能改变，而vector容器可以根据用户数据的变化而不断调整内存空间的大小

vector容器有已使用空间和可用空间，已使用空间是指vector容器的大小，可用空间是指vector容器可容纳的最大数据空间的capacity
其中内存配置是最重要的。vector的实现技术，关键在于其对大小的控制以及重新配置时的数据移动效率。

另外，由于　vector维护的是一个连续线性空间，所以对vector支持随机存取

注意：vector动态增加大小时，并不是在原空间之后持续新空间（因为无法保证原空间之后尚有可供配置的空间），而是以原大小的两倍另外配置
一块较大的空间，然后将原内容拷贝过来，然后才开始在原内容之后构造新元素，并释放原空间。因此，对vector的任何操作，一旦引起空间重新配置，
指向原vector的所有迭代器就都失效了。